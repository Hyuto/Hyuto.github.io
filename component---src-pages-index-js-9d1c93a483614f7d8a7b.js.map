{"version":3,"file":"component---src-pages-index-js-9d1c93a483614f7d8a7b.js","mappings":"yJA+CA,IA1CY,WAAO,IAAD,EAeVA,EAAM,WAdCC,EAAAA,EAAAA,gBAAe,cAcRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,OACb,gBAAC,EAAAC,KAAD,CAAMC,GAAG,UACP,gBAAC,EAAAC,EAAD,CACEH,UAAU,aACVI,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,wBAWDd,MAAAA,OAAA,EAAAA,EAAQe,OACP,uCACa,8BAASf,EAAOe,MAD7B,KAC6Cf,MAAAA,OAAA,EAAAA,EAAQgB,UAAW,KADhE,IAGE,gBAAC,EAAAX,KAAD,CAAMC,GAAG,UAAT,gB,6CCWV,IAhDe,SAAC,GAAmC,IAAD,EAG5CW,EAHYC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3BC,EADQ,MACKH,EAASI,SAGtBC,GAAOtB,EAAAA,EAAAA,gBAAe,cA0B5B,OAbEgB,EADEI,EAEA,sBAAIjB,UAAU,gBACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAKa,IAKhB,gBAAC,EAAAd,KAAD,CAAMD,UAAU,mBAAmBE,GAAG,KACnCa,GAML,uBAAKf,UAAU,iBAAiB,oBAAmBiB,GACjD,0BAAQjB,UAAU,iBAAiBa,GACnC,4BAAOG,GACP,0BAAQI,MAAO,CAAEC,UAAW,WAC1B,6CACKF,EAAKrB,KAAKC,oBADf,aACK,EAAwBH,OAAOe,KADpC,KAC2C,IAAIW,MAAOC,eAFxD,mBAME,qBAAGC,KAAK,4BAAR,cANF,OAOO,Q,kFCoBb,UA1DkB,SAAC,GAAwB,IAAD,EAArBL,EAAqB,EAArBA,KAAML,EAAe,EAAfA,SACnBW,GAAY,UAAAN,EAAKrB,KAAKC,oBAAV,eAAwBgB,QAAxB,QACZW,EAAQP,EAAKQ,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQf,SAAUA,EAAUC,MAAOU,GACjC,gBAAC,IAAD,CAAKV,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQD,SAAUA,EAAUC,MAAOU,GACjC,gBAAC,IAAD,CAAKV,MAAM,cACX,gBAAC,IAAD,MACA,sBAAIK,MAAO,CAAEU,UAAU,SACpBJ,EAAMK,KAAI,SAAAC,GACT,IAAMjB,EAAQiB,EAAKC,YAAYlB,OAASiB,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACEnC,UAAU,iBACVqC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAArC,KAAD,CAAMC,GAAI8B,EAAKE,OAAOC,KAAMI,SAAS,OACnC,wBAAMA,SAAS,YAAYxB,KAG/B,6BAAQiB,EAAKC,YAAYO,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQV,EAAKC,YAAYU,aAAeX,EAAKY,SAE/CL,SAAS,0B","sources":["webpack://Hyuto.github.io/./src/components/bio.js","webpack://Hyuto.github.io/./src/components/layout.js","webpack://Hyuto.github.io/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Link } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      <Link to=\"/about\">\n        <StaticImage\n          className=\"bio-avatar\"\n          layout=\"fixed\"\n          formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n          src=\"../images/profile-pic.png\"\n          width={50}\n          height={50}\n          quality={95}\n          alt=\"Profile picture\"\n        />\n      </Link>\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <Link to=\"/about\">About Me</Link>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  const data = useStaticQuery(graphql`\n    query LayoutQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n          }\n        }\n      }\n    }\n  `)\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer style={{ textAlign: \"center\" }}>\n        <strong>\n          Â© {data.site.siteMetadata?.author.name} {new Date().getFullYear()}\n        </strong>\n        , Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby.js </a>\n        and {\"\\u2764\"}\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","Link","to","S","layout","formats","src","width","height","quality","alt","name","summary","header","location","title","children","isRootPath","pathname","data","style","textAlign","Date","getFullYear","href","siteTitle","posts","allMarkdownRemark","nodes","length","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}