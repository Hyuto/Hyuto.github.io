{"version":3,"file":"tf-converter.es2017.min.js","sources":["../src/data/compiled_api.ts","../src/operations/custom_op/register.ts","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/custom_op/node_value_impl.ts","../src/executor/tensor_utils.ts","../src/executor/tensor_array.ts","../src/executor/tensor_list.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/operations/operation_executor.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/executor/execution_context.ts","../src/executor/model_analysis.ts","../src/executor/graph_executor.ts","../src/executor/graph_model.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\n\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const tensor =\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        tfc.util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0];\n  }\n\n  const nodeName = parts[0];\n  return [nodeName, Number(parts[parts.length - 1])];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: tfc.Tensor): tfc.Tensor {\n  return tensor.kept ? tensor : tfc.clone(tensor);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListScatterV2',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 3, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGather',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListSetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListReserve',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListFromTensor',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListStack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'},\n      {'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSplit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListConcat',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPopBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListPushBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n];\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  },\n  {\n    'tfOpName': 'Dilation2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'rates', 'name': 'dilations', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV4',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'T_threshold',\n        'name': 'threshold',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'pad_to_max_output_size',\n        'name': 'padToMaxOutputSize',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool'},\n      {'tfName': 'reverse', 'name': 'reverse', 'type': 'bool'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': []\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {getRegisteredOp} from './custom_op/register';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      }\n      if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    return {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      signature,\n      functions\n    };\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  util.assert(\n      shapesEqualAllowUndefinedSize(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.dispose());\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => tensor.reshape(elementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n\n    const tensor = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return tensor.reshape(elementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n\n    return this.tensors[elementIndex];\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    return tidy(() => {\n      const tensors = indices.map(i => this.tensors[i].reshape(elementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    return tidy(() => {\n      const tensors = this.tensors.map(t => t.reshape(elementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const outputShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      outputShape, elementShape, 'TensorList shape mismatch: ');\n\n  const tensorList: Tensor[] = tensor.unstack();\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = tensor.reshape([1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = slice(tensor, indices, sizes).reshape(elementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond =\n          getParamValue('cond', node, tensorMap, context) as tfc.Tensor;\n      const args =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: tfc.Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id = getParamValue('tensorArrayId', node, tensorMap, context) as\n          tfc.Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId = getParamValue('tensorArrayId', node, tensorMap, context) as\n          tfc.Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as\n          tfc.Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as\n          tfc.Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as\n          tfc.Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as\n          tfc.Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId = getParamValue('tensorArrayId', node, tensorMap, context) as\n          tfc.Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as\n          tfc.Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as tfc.Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as tfc.Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as\n          tfc.DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as\n          tfc.DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = reserve(elementShape, elementDtype, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as tfc.Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as\n          tfc.DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as tfc.Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as\n          tfc.DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as\n          tfc.DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as tfc.Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as tfc.Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as tfc.Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as\n          tfc.DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  const [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfc.conv1d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfc.conv2d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfc.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                tfc.Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                tfc.Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfc.fused.Activation,\n            preluActivationWeights: preluArg\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfc.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                tfc.Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                tfc.Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfc.fused.Activation,\n            preluActivationWeights: preluArg\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [tfc.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfc.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfc.conv3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor4D |\n                  tfc.Tensor<tfc.Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  tfc.Tensor<tfc.Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.avgPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.maxPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = tfc.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [tfc.dilation2d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n  const scores =\n      getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfc.image.nonMaxSuppressionWithScoreAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfc.image.nonMaxSuppressionPaddedAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      const condition =\n          (getParamValue('condition', node, tensorMap, context) as tfc.Tensor)\n              .asType('bool');\n      const result = [await tfc.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'DivNoNan': {\n      return [tfc.divNoNan(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Complex':\n      return [tfc.complex(\n          getParamValue('real', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('imag', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Imag':\n      return [tfc.imag(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Real':\n      return [tfc.real(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    case 'Prelu':\n      return [tfc.prelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as tfc.Tensor)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'Multinomial': {\n      const logits =\n          getParamValue('logits', node, tensorMap, context) as tfc.Tensor1D;\n      const numSamples =\n          getParamValue('numSamples', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.multinomial(logits, numSamples, seed)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n      const data = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [cloneTensor(data)];\n    }\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => cloneTensor(t));\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [cloneTensor(snapshot)];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [tfc.scalar(1)];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select':\n    case 'SelectV2': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    case '_FusedMatMul':\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'Fused MatMul with BiasAdd and Prelu must have two ' +\n              'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'Fused MatMul with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.fused.matMul({\n        a: getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n        b: getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n        transposeA: getParamValue('transposeA', node, tensorMap, context) as\n            boolean,\n        transposeB: getParamValue('transposeB', node, tensorMap, context) as\n            boolean,\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'FusedBatchNormV3': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Cumsum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const exclusive =\n          getParamValue('exclusive', node, tensorMap, context) as boolean;\n      const reverse =\n          getParamValue('reverse', node, tensorMap, context) as boolean;\n      return [tfc.cumsum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          exclusive, reverse)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const n = getParamValue('n', node, tensorMap, context) as number;\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      let inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      inputs = inputs.slice(0, n);\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      return tfc.unstack(tensor, axis);\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n\n      return tfc.split(tensor, numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('padding', node, tensorMap, context) as\n              Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings =\n          getParamValue('paddings', node, tensorMap, context) as number[][];\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops =\n          getParamValue('crops', node, tensorMap, context) as number[][];\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    case 'BroadcastTo': {\n      return [tfc.broadcastTo(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorListMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {TensorList} from './tensor_list';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      readonly weightMap: NamedTensorsMap = {},\n      readonly tensorArrayMap: TensorArrayMap = {},\n      readonly tensorListMap: TensorListMap = {},\n      readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList: TensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id: number): TensorList {\n    return this.tensorListMap[id];\n  }\n\n  dispose() {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose();\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[],\n    weightMap: NamedTensorsMap): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputs.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep, outputs,\n              intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose();\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   * @param isFunctionExecution Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = new Set<number>(results.map(t => t.id));\n    const inputIds =\n        new Set<number>(Object.keys(inputs).map(name => inputs[name].id));\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&\n            !inputIds.has(tensor.id) &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose();\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames: string[],\n      isFunctionExecution: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputNames.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n\n    return this.loadSync(artifacts);\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true} */\n  loadSync(artifacts:io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n    let signature = {};\n    if (this.artifacts.userDefinedMetadata != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    }\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.3.0';\nexport {version};\n"],"names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","name","getParamValue","paramName","node","tensorMap","context","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","tensor","data","dataSync","tfc.util","toNestedArray","shape","attrParam","attrParams","value","tensorsMap","nodeName","index","parseNodeName","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","inputName","currentContextId","parts","split","length","Number","getPadding","pad","explicitPadding","i","cloneTensor","kept","tfc.clone","tfOpName","category","inputs","attrs","tfName","notSupported","defaultValue","tfDeprecatedName","OperationMapper","Instance","this","_instance","[object Object]","mappersJson","concat","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","op","json","opMappers","reduce","mapper","signature","tfNodes","placeholders","weights","nodes","mapNode","startsWith","push","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","Object","keys","forEach","key","children","signatureKey","functions","library","function","func","mapFunction","entries","prev","curr","attr","newNode","input","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","Error","functionDef","nodeDef","inputArg","arg","dtype","parseDtypeParam","returnNodeMap","ret","outputArg","output","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","parseStringParam","s","keepCase","Array","isArray","String","fromCharCode","apply","text","global","env","atob","Buffer","toString","decodeBase64","toLowerCase","def","b","parseInt","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","unknownRank","dim","size","f","NodeValueImpl","getInput","getAttr","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","util","assert","n1","n2","shapesEqualAllowUndefinedSize","TensorArray","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","idTensor","scalar","keep","id","closed","closed_","tensors","dispose","tensorWithState","cleared","read","indices","t","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","sizes","TensorList","elementDtype","maxNumElements","numElements","reshapedTensors","pop","elementIndex","executeOp","async","thenFunc","elseFunc","cond","args","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds","condValue","indexOf","result","origResult","resultIds","pred","frameId","enterFrame","exitFrame","nextIteration","tensorArray","addTensorArray","writeTensor","writeTensorArray","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatterTensorArray","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","clearAndClose","tensorList","getTensorList","setItem","elementDType","getItem","addTensorList","reserve","fromTensor","pushBack","popBack","TypeError","fusedConvAndDepthWiseParams","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","stride","dataFormat","toUpperCase","dilations","biasArg","preluArg","nmsParams","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","tfc.tidy","tfc.add","tfc.addN","tfc.mod","tfc.mul","tfc.div","tfc.divNoNan","tfc.floorDiv","tfc.sub","tfc.minimum","tfc.maximum","tfc.pow","tfc.squaredDifference","arithmetic.executeOp","tfc.abs","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.complex","tfc.cos","tfc.cosh","tfc.elu","tfc.erf","tfc.exp","tfc.expm1","tfc.floor","tfc.log","tfc.log1p","tfc.imag","tfc.neg","tfc.reciprocal","tfc.real","tfc.relu","tfc.round","tfc.selu","tfc.sigmoid","tfc.sin","tfc.sign","tfc.sinh","tfc.softplus","tfc.sqrt","tfc.square","tfc.tanh","tfc.tan","tfc.clipByValue","tfc.rsqrt","tfc.prod","tfc.leakyRelu","tfc.prelu","basicMath.executeOp","control.executeOp","dilation","tfc.conv1d","tfc.conv2d","tfc.fused","conv2d","x","filter","strides","bias","activation","preluActivationWeights","depthwiseConv2d","tfc.conv2dTranspose","tfc.depthwiseConv2d","tfc.conv3d","kernelSize","tfc.avgPool","tfc.maxPool","includeBatchInIndex","indexes","tfc.maxPoolWithArgmax","tfc.avgPool3d","tfc.maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","tfc.dilation2d","convolution.executeOp","tfc.fill","stop","num","tfc.linspace","logits","numSamples","seed","tfc.multinomial","depth","onValue","offValue","tfc.oneHot","tfc.ones","tfc.onesLike","tfc.randomUniform","step","tfc.range","mean","stdDev","tfc.truncatedNormal","tfc.zeros","tfc.zerosLike","creation.executeOp","tfc.image","nonMaxSuppressionWithScoreAsync","selectedIndices","selectedScores","padToMaxOutputSize","nonMaxSuppressionPaddedAsync","validOutputs","nonMaxSuppressionAsync","condition","asType","tfc.whereAsync","tfc.setdiff1dAsync","dynamic.executeOp","k","sorted","tfc.topk","values","evaluation.executeOp","images","alignCorners","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","image.executeOp","tfc.tensor1d","tfc.scalar","rank","message","summarize","console","warn","log","prototype","call","graph.executeOp","tfc.equal","tfc.notEqual","tfc.greater","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalAnd","tfc.logicalNot","tfc.logicalOr","tfc.where","logical.executeOp","tfc.matMul","tfc.transpose","matMul","a","transposeA","transposeB","matrices.executeOp","tfc.batchNorm","tfc.localResponseNormalization","tfc.softmax","tfc.logSoftmax","tfc.sparseToDense","normalization.executeOp","axis","keepDims","tfc.max","tfc.mean","tfc.min","tfc.sum","tfc.all","tfc.any","tfc.argMax","tfc.argMin","exclusive","reverse","tfc.cumsum","reduction.executeOp","n","tfc.concat","tfc.gather","tfc.reverse","begin","tfc.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfc.stridedSlice","squeezedShape","squeeze","mapped","sameShape","arraysEqual","tfc.stack","tfc.unstack","reps","tfc.tile","numOrSizeSplits","tfc.split","tfc.scatterND","tfc.gatherND","sparseValues","sliceJoin.executeOp","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","spectral.executeOp","tfc.cast","tfc.expandDims","tfc.squeeze","tfc.reshape","tfc.pad","blockShape","paddings","tfc.spaceToBatchND","crops","tfc.batchToSpaceND","blockSize","tfc.depthToSpace","tfc.broadcastTo","transformation.executeOp","opMapper","customExecutor","Promise","then","ExecutionContext","weightMap","frameName","iterationId","rootContext","generateCurrentContextIds","currentContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","frontier","isControlFlow","isDynamicShape","child","has","add","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","GraphExecutor","parent","Map","_outputs","_inputs","_signature","_functions","_functionExecutorMap","weightIds","_weightIds","functionExecutorMap","_weightMap","inputNodes","outputNodes","sortedInputs","sort","sortedOutputs","SEPERATOR","executionInfo","outNames","inNames","weight","orderedNodes","every","getNodesInTopologicalOrder","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","compilationKey","getCompilationKey","compiledMap","get","compile","set","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","getTensorsForCurrentContenxt","count","_executeAsync","isFunctionExecution","executeWithControlFlow","results","outputIds","inputIds","isDisposed","mappedInputs","added","promises","processStack","all","missingOutputs","alternativeMsg","item","processChildNodes","childNode","some","match","notInGraph","normalizedName","GraphModel","modelUrl","loadOptions","modelVersion","version","executor","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","findIOHandler","artifacts","loadSync","modelTopology","userDefinedMetadata","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","transformGraph","convertTensorMapToTensorsMap","handlerOrURL","config","getSaveHandlers","save","execute","Tensor","normalizeInputs","normalizeOutputs","executeAsync","newMap","options","fromTFHub","endsWith","model","opFunc"],"mappings":"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"}