{"version":3,"file":"component---src-pages-showcase-sa-corona-index-js-bb70483d62657cb488ed.js","mappings":"yWAEWA,EAAQ,iCC4HnB,EAvHmB,WACjB,OAA0BC,EAAAA,EAAAA,UAAS,IAA5BC,EAAP,KAAcC,EAAd,KACA,GAAoCF,EAAAA,EAAAA,UAAS,CAAEG,MAAO,KAAMC,YAAa,CAAC,EAAG,KAAtEC,EAAP,KAAmBC,EAAnB,KACA,GAA8BN,EAAAA,EAAAA,WAAS,GAAhCO,EAAP,KAAgBC,EAAhB,KACMC,GAAQC,EAAAA,EAAAA,QAAO,MAEfC,EAAQ,mCAAG,WAAMC,GAAN,wEACfA,EAAEC,iBACFL,GAAW,GAFI,SAGTM,MAAM,8CAA+C,CACzDC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEpB,MAAOA,MAE7BqB,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAC,GACJf,GAAW,GACXF,EAAciB,MAEfE,OAAM,SAAAC,GACLlB,GAAW,GACXmB,MAAM,6CACNC,QAAQC,IAAIH,MApBD,2CAAH,sDAwBd,OACE,gBAAC,IAAD,CAAQ3B,MAAO+B,EAAAA,GAAgBC,YAAaD,EAAAA,IAC1C,uBAAKE,UDtCa,uCCuChB,uBAAKA,UAAWC,GACd,0BAAKH,EAAAA,IACL,yHAES,IACP,8BACE,qBAAGI,KAAK,iEAAR,iBAIN,uBAAKF,UD/CQ,oCCgDX,gBAAC,IAAD,CAAQC,MAAO,CAAEE,QAAS5B,EAAU,UAAY,SAAhD,wBACA,uBAAKyB,UDhDG,iCCiDN,wBAAMA,UDhDA,iCCiDJ,uBAAKA,UAAWC,GAAhB,SACA,4BACED,UDlDG,iCCmDHI,MAAOnC,EACPoC,SAAU,SAAAzB,GAAC,OAAIV,EAASU,EAAE0B,OAAOF,WAGrC,uBAAKJ,UDtDE,kCCuDL,gBAAC,KAAD,CACEO,KAAM,CACJC,OAAQ,CAAC,UAAW,SAAU,WAC9BC,SAAU,CACR,CACEC,MAAO,iBACPH,KAAMlC,EAAWD,YACjBuC,gBAAiB,CACf,0BACA,0BACA,8BAKRC,QAAS,CACPC,qBAAqB,EACrBC,UAAW,IACXC,SAAU,CACRC,IAAK,CACHC,YAAa,IAGjBC,YAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,KAInBC,MAAO,CACL,CACEC,SAAS,MAKjBC,IAAKhD,MAIX,uBAAKuB,UDjGS,uCCkGZ,0BAAQ0B,QAAS/C,GAAjB,UACA,0BACE+C,QAAS,SAAA9C,GACPA,EAAEC,iBACFX,EAAS,IACTI,EAAc,CAAEH,MAAO,KAAMwD,MAAO,SAJxC,UAUF,uBAAK3B,UD5GS,uCC6GX3B,EAAWF,MAAX,gBAAmCE,EAAWF,MAAU","sources":["webpack://Hyuto.github.io/./src/pages/showcase/sa-corona/sa-corona.module.scss","webpack://Hyuto.github.io/./src/pages/showcase/sa-corona/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var SADWrapper = \"sa-corona-module--SADWrapper--3u8b8\";\nexport var title = \"sa-corona-module--title--Arwia\";\nexport var content = \"sa-corona-module--content--29CYu\";\nexport var main = \"sa-corona-module--main--HM7X2\";\nexport var form = \"sa-corona-module--form--1-pIV\";\nexport var words = \"sa-corona-module--words--1GMB2\";\nexport var chart = \"sa-corona-module--chart--2eIcY\";\nexport var btnWrapper = \"sa-corona-module--btnWrapper--3C6q6\";\nexport var prediction = \"sa-corona-module--prediction--3eXsf\";","import React, { useState, useRef } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Layout from \"templates/showcase\";\nimport Loader from \"components/loader/loader\";\nimport metadata from \"showcase/sa-corona.json\";\nimport * as style from \"./sa-corona.module.scss\";\n\nconst SADetector = () => {\n  const [words, setWords] = useState(\"\");\n  const [prediction, setPrediction] = useState({ class: null, probability: [0, 0] });\n  const [loading, setLoading] = useState(false);\n  const chart = useRef(null);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    await fetch(\"https://hyuto-blog.herokuapp.com/sa-corona/\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ words: words }),\n    })\n      .then(content => content.json())\n      .then(content => {\n        setLoading(false);\n        setPrediction(content);\n      })\n      .catch(error => {\n        setLoading(false);\n        alert(\"Error : Can't send request to the server.\");\n        console.log(error);\n      });\n  };\n\n  return (\n    <Layout title={metadata.title} description={metadata.description}>\n      <div className={style.SADWrapper}>\n        <div className={style.title}>\n          <h2>{metadata.title}</h2>\n          <p>\n            Sentiment detector using SVM trained with Indonesian twitter dataset on corona focused\n            topic.{\" \"}\n            <strong>\n              <a href=\"https://github.com/Hyuto/Analisis-Sentimen-Corona-DKI-Jakarta\">Repository</a>\n            </strong>\n          </p>\n        </div>\n        <div className={style.content}>\n          <Loader style={{ display: loading ? \"inherit\" : \"none\" }}>Sending to server...</Loader>\n          <div className={style.main}>\n            <form className={style.form}>\n              <div className={style.title}>Words</div>\n              <textarea\n                className={style.words}\n                value={words}\n                onChange={e => setWords(e.target.value)}\n              ></textarea>\n            </form>\n            <div className={style.chart}>\n              <Bar\n                data={{\n                  labels: [\"Negatif\", \"Netral\", \"Positif\"],\n                  datasets: [\n                    {\n                      label: \"# Probabilitiy\",\n                      data: prediction.probability,\n                      backgroundColor: [\n                        \"rgba(255, 99, 132, 0.2)\",\n                        \"rgba(255, 206, 86, 0.2)\",\n                        \"rgba(54, 162, 235, 0.2)\",\n                      ],\n                    },\n                  ],\n                }}\n                options={{\n                  maintainAspectRatio: false,\n                  indexAxis: \"y\",\n                  elements: {\n                    bar: {\n                      borderWidth: 2,\n                    },\n                  },\n                  responsive: true,\n                  scales: {\n                    xAxes: [\n                      {\n                        ticks: {\n                          beginAtZero: true,\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        stacked: true,\n                      },\n                    ],\n                  },\n                }}\n                ref={chart}\n              />\n            </div>\n          </div>\n          <div className={style.btnWrapper}>\n            <button onClick={onSubmit}>Submit</button>\n            <button\n              onClick={e => {\n                e.preventDefault();\n                setWords(\"\");\n                setPrediction({ class: null, proba: null });\n              }}\n            >\n              Reset\n            </button>\n          </div>\n          <div className={style.prediction}>\n            {prediction.class ? `Prediction : ${prediction.class}` : null}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default SADetector;\n"],"names":["title","useState","words","setWords","class","probability","prediction","setPrediction","loading","setLoading","chart","useRef","onSubmit","e","preventDefault","fetch","method","mode","headers","Accept","body","JSON","stringify","then","content","json","catch","error","alert","console","log","metadata","description","className","style","href","display","value","onChange","target","data","labels","datasets","label","backgroundColor","options","maintainAspectRatio","indexAxis","elements","bar","borderWidth","responsive","scales","xAxes","ticks","beginAtZero","yAxes","stacked","ref","onClick","proba"],"sourceRoot":""}