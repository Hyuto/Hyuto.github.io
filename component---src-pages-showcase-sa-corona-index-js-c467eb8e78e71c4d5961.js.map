{"version":3,"file":"component---src-pages-showcase-sa-corona-index-js-c467eb8e78e71c4d5961.js","mappings":"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","sources":["webpack://Hyuto.github.io/./src/components/ort-loader.js","webpack://Hyuto.github.io/./src/pages/showcase/sa-corona/sa-corona.module.scss","webpack://Hyuto.github.io/./src/pages/showcase/sa-corona/index.js"],"sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\n\n/**\n * Load onnxruntime-web via CDN, because uncertain problem when use bundler\n */\nconst ORTLoader = ({ setLoad }) => {\n  return (\n    <>\n      <Helmet\n        script={[{ src: \"https://cdn.jsdelivr.net/npm/onnxruntime-web/dist/ort.min.js\" }]}\n        onChangeClientState={(newState, addedTags) => {\n          if (addedTags.scriptTags) {\n            addedTags.scriptTags[0].onload = () => {\n              console.log(\"onnxruntime-web loaded!\");\n              setLoad(\"loaded\");\n            };\n          } else if (ort) {\n            // if something goes wrong e.g addedTags === null\n            console.log(\"onnxruntime-web loaded!\");\n            setLoad(\"loaded\");\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport default ORTLoader;\n","// extracted by mini-css-extract-plugin\nexport var SADWrapper = \"sa-corona-module--SADWrapper--PJh-7\";\nexport var btnWrapper = \"sa-corona-module--btnWrapper--PauIk\";\nexport var chart = \"sa-corona-module--chart--GWa3r\";\nexport var content = \"sa-corona-module--content--R7sit\";\nexport var form = \"sa-corona-module--form--fTtcT\";\nexport var main = \"sa-corona-module--main--5vP08\";\nexport var prediction = \"sa-corona-module--prediction--xbSmU\";\nexport var title = \"sa-corona-module--title--HqljB\";\nexport var words = \"sa-corona-module--words--UW1AG\";","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Stemmer, Tokenizer } from \"sastrawijs\";\nimport { Bar } from \"react-chartjs-2\";\nimport Layout from \"templates/showcase\";\nimport ORTLoader from \"components/ort-loader\";\nimport Loader from \"components/loader/loader\";\nimport metadata from \"showcase/sa-corona.json\";\nimport * as style from \"./sa-corona.module.scss\";\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst SADetector = () => {\n  const [words, setWords] = useState(\"\");\n  const [prediction, setPrediction] = useState({ class: null, probability: [0, 0, 0] });\n  const [loading, setLoading] = useState({ state: true, message: \"Loading onnxruntime-web...\" });\n  const [model, setModel] = useState(null);\n  const [dependencies, setDependencies] = useState(\"loading\");\n  const chart = useRef(null);\n  const labels = [\"Negatif\", \"Netral\", \"Positif\"];\n  const stemmer = new Stemmer();\n  const tokenizer = new Tokenizer();\n\n  const preprocess = (words) => {\n    const tokens = tokenizer.tokenize(words);\n    return tokens.map((word) => stemmer.stem(word)).join(\" \");\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (words === \"\") alert(\"Please input words!\");\n    else if (model) {\n      const input = new ort.Tensor(\"string\", [preprocess(words)], [1, 1]);\n      await model\n        .run({ words: input })\n        .then((results) => {\n          setPrediction({\n            class: labels[results.label.data[0]],\n            probability: Array.from(results.probabilities.data),\n          });\n        })\n        .catch((error) => {\n          alert(\"Failed to predict!.\");\n          console.error(error);\n        });\n    } else alert(\"Model isn't loaded!\");\n  };\n\n  useEffect(async () => {\n    if (dependencies === \"loaded\" && model === null) {\n      setLoading({ state: true, message: \"Loading model...\" });\n      try {\n        const session = await ort.InferenceSession.create(\n          `${window.location.origin}/model/sa-model/model.onnx`\n        );\n\n        // warmup model\n        const input = new ort.Tensor(\"string\", [\"jokowi cebong\"], [1, 1]);\n        await session.run({ words: input });\n        setModel(session);\n      } catch (e) {\n        console.error(e);\n        alert(\"Can't load model!\");\n      }\n      setLoading({ state: false, message: \"\" });\n    }\n  }, [dependencies]);\n\n  return (\n    <Layout title={metadata.title} description={metadata.description}>\n      <ORTLoader setLoad={setDependencies} />\n      <div className={style.SADWrapper}>\n        <div className={style.title}>\n          <h2>{metadata.title}</h2>\n          <p>\n            Sentiment detector using TF-IDF and SVM trained with Indonesian twitter dataset on\n            corona focused topic live in browser powered by <code>onnxruntime-web</code> with{\" \"}\n            <code>wasm</code> backend.{\" \"}\n            <strong>\n              <a\n                href=\"https://github.com/Hyuto/Analisis-Sentimen-Corona-DKI-Jakarta\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                Repository\n              </a>\n            </strong>\n          </p>\n        </div>\n        <div className={style.content}>\n          <Loader style={{ display: loading.state ? \"inherit\" : \"none\" }}>{loading.message}</Loader>\n          <div className={style.main}>\n            <form className={style.form}>\n              <div className={style.title}>Words</div>\n              <textarea\n                className={style.words}\n                value={words}\n                onChange={(e) => setWords(e.target.value)}\n              ></textarea>\n            </form>\n            <div className={style.chart}>\n              <Bar\n                data={{\n                  labels: labels,\n                  datasets: [\n                    {\n                      label: \"# Probabilitiy\",\n                      data: prediction.probability,\n                      backgroundColor: [\n                        \"rgba(255, 99, 132, 0.2)\",\n                        \"rgba(255, 206, 86, 0.2)\",\n                        \"rgba(54, 162, 235, 0.2)\",\n                      ],\n                    },\n                  ],\n                }}\n                options={{\n                  maintainAspectRatio: false,\n                  indexAxis: \"y\",\n                  elements: {\n                    bar: {\n                      borderWidth: 2,\n                    },\n                  },\n                  responsive: true,\n                  scales: {\n                    x: {\n                      ticks: {\n                        beginAtZero: true,\n                      },\n                    },\n                    y: {\n                      stacked: true,\n                    },\n                  },\n                }}\n                ref={chart}\n              />\n            </div>\n          </div>\n          <div className={style.btnWrapper}>\n            <button onClick={onSubmit}>Submit</button>\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                setWords(\"\");\n                setPrediction({ class: null, proba: null });\n              }}\n            >\n              Reset\n            </button>\n          </div>\n          <div className={style.prediction}>\n            {prediction.class ? `Prediction : ${prediction.class}` : null}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default SADetector;\n"],"names":["setLoad","Helmet","script","src","onChangeClientState","newState","addedTags","scriptTags","onload","console","log","ort","title","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","useState","words","setWords","class","probability","prediction","setPrediction","state","message","loading","setLoading","model","setModel","dependencies","setDependencies","chart","useRef","labels","stemmer","Stemmer","tokenizer","Tokenizer","preprocess","tokenize","map","word","stem","join","onSubmit","e","preventDefault","alert","input","Tensor","run","then","results","label","data","Array","from","probabilities","catch","error","useEffect","InferenceSession","create","window","location","origin","session","metadata","description","className","style","href","rel","target","display","value","onChange","datasets","backgroundColor","options","maintainAspectRatio","indexAxis","elements","bar","borderWidth","responsive","scales","x","ticks","beginAtZero","y","stacked","ref","onClick","proba"],"sourceRoot":""}